# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_envcpp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_envcpp')
    _envcpp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_envcpp', [dirname(__file__)])
        except ImportError:
            import _envcpp
            return _envcpp
        try:
            _mod = imp.load_module('_envcpp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _envcpp = swig_import_helper()
    del swig_import_helper
else:
    import _envcpp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _envcpp.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _envcpp.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _envcpp.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _envcpp.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _envcpp.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _envcpp.SwigPyIterator_equal(self, x)

    def copy(self):
        return _envcpp.SwigPyIterator_copy(self)

    def next(self):
        return _envcpp.SwigPyIterator_next(self)

    def __next__(self):
        return _envcpp.SwigPyIterator___next__(self)

    def previous(self):
        return _envcpp.SwigPyIterator_previous(self)

    def advance(self, n):
        return _envcpp.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _envcpp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _envcpp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _envcpp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _envcpp.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _envcpp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _envcpp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _envcpp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _envcpp.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _envcpp.vectori___nonzero__(self)

    def __bool__(self):
        return _envcpp.vectori___bool__(self)

    def __len__(self):
        return _envcpp.vectori___len__(self)

    def __getslice__(self, i, j):
        return _envcpp.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _envcpp.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _envcpp.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _envcpp.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _envcpp.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _envcpp.vectori___setitem__(self, *args)

    def pop(self):
        return _envcpp.vectori_pop(self)

    def append(self, x):
        return _envcpp.vectori_append(self, x)

    def empty(self):
        return _envcpp.vectori_empty(self)

    def size(self):
        return _envcpp.vectori_size(self)

    def swap(self, v):
        return _envcpp.vectori_swap(self, v)

    def begin(self):
        return _envcpp.vectori_begin(self)

    def end(self):
        return _envcpp.vectori_end(self)

    def rbegin(self):
        return _envcpp.vectori_rbegin(self)

    def rend(self):
        return _envcpp.vectori_rend(self)

    def clear(self):
        return _envcpp.vectori_clear(self)

    def get_allocator(self):
        return _envcpp.vectori_get_allocator(self)

    def pop_back(self):
        return _envcpp.vectori_pop_back(self)

    def erase(self, *args):
        return _envcpp.vectori_erase(self, *args)

    def __init__(self, *args):
        this = _envcpp.new_vectori(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _envcpp.vectori_push_back(self, x)

    def front(self):
        return _envcpp.vectori_front(self)

    def back(self):
        return _envcpp.vectori_back(self)

    def assign(self, n, x):
        return _envcpp.vectori_assign(self, n, x)

    def resize(self, *args):
        return _envcpp.vectori_resize(self, *args)

    def insert(self, *args):
        return _envcpp.vectori_insert(self, *args)

    def reserve(self, n):
        return _envcpp.vectori_reserve(self, n)

    def capacity(self):
        return _envcpp.vectori_capacity(self)
    __swig_destroy__ = _envcpp.delete_vectori
    __del__ = lambda self: None
vectori_swigregister = _envcpp.vectori_swigregister
vectori_swigregister(vectori)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _envcpp.vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _envcpp.vectord___nonzero__(self)

    def __bool__(self):
        return _envcpp.vectord___bool__(self)

    def __len__(self):
        return _envcpp.vectord___len__(self)

    def __getslice__(self, i, j):
        return _envcpp.vectord___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _envcpp.vectord___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _envcpp.vectord___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _envcpp.vectord___delitem__(self, *args)

    def __getitem__(self, *args):
        return _envcpp.vectord___getitem__(self, *args)

    def __setitem__(self, *args):
        return _envcpp.vectord___setitem__(self, *args)

    def pop(self):
        return _envcpp.vectord_pop(self)

    def append(self, x):
        return _envcpp.vectord_append(self, x)

    def empty(self):
        return _envcpp.vectord_empty(self)

    def size(self):
        return _envcpp.vectord_size(self)

    def swap(self, v):
        return _envcpp.vectord_swap(self, v)

    def begin(self):
        return _envcpp.vectord_begin(self)

    def end(self):
        return _envcpp.vectord_end(self)

    def rbegin(self):
        return _envcpp.vectord_rbegin(self)

    def rend(self):
        return _envcpp.vectord_rend(self)

    def clear(self):
        return _envcpp.vectord_clear(self)

    def get_allocator(self):
        return _envcpp.vectord_get_allocator(self)

    def pop_back(self):
        return _envcpp.vectord_pop_back(self)

    def erase(self, *args):
        return _envcpp.vectord_erase(self, *args)

    def __init__(self, *args):
        this = _envcpp.new_vectord(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _envcpp.vectord_push_back(self, x)

    def front(self):
        return _envcpp.vectord_front(self)

    def back(self):
        return _envcpp.vectord_back(self)

    def assign(self, n, x):
        return _envcpp.vectord_assign(self, n, x)

    def resize(self, *args):
        return _envcpp.vectord_resize(self, *args)

    def insert(self, *args):
        return _envcpp.vectord_insert(self, *args)

    def reserve(self, n):
        return _envcpp.vectord_reserve(self, n)

    def capacity(self):
        return _envcpp.vectord_capacity(self)
    __swig_destroy__ = _envcpp.delete_vectord
    __del__ = lambda self: None
vectord_swigregister = _envcpp.vectord_swigregister
vectord_swigregister(vectord)

class vectors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectors, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _envcpp.vectors_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _envcpp.vectors___nonzero__(self)

    def __bool__(self):
        return _envcpp.vectors___bool__(self)

    def __len__(self):
        return _envcpp.vectors___len__(self)

    def __getslice__(self, i, j):
        return _envcpp.vectors___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _envcpp.vectors___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _envcpp.vectors___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _envcpp.vectors___delitem__(self, *args)

    def __getitem__(self, *args):
        return _envcpp.vectors___getitem__(self, *args)

    def __setitem__(self, *args):
        return _envcpp.vectors___setitem__(self, *args)

    def pop(self):
        return _envcpp.vectors_pop(self)

    def append(self, x):
        return _envcpp.vectors_append(self, x)

    def empty(self):
        return _envcpp.vectors_empty(self)

    def size(self):
        return _envcpp.vectors_size(self)

    def swap(self, v):
        return _envcpp.vectors_swap(self, v)

    def begin(self):
        return _envcpp.vectors_begin(self)

    def end(self):
        return _envcpp.vectors_end(self)

    def rbegin(self):
        return _envcpp.vectors_rbegin(self)

    def rend(self):
        return _envcpp.vectors_rend(self)

    def clear(self):
        return _envcpp.vectors_clear(self)

    def get_allocator(self):
        return _envcpp.vectors_get_allocator(self)

    def pop_back(self):
        return _envcpp.vectors_pop_back(self)

    def erase(self, *args):
        return _envcpp.vectors_erase(self, *args)

    def __init__(self, *args):
        this = _envcpp.new_vectors(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _envcpp.vectors_push_back(self, x)

    def front(self):
        return _envcpp.vectors_front(self)

    def back(self):
        return _envcpp.vectors_back(self)

    def assign(self, n, x):
        return _envcpp.vectors_assign(self, n, x)

    def resize(self, *args):
        return _envcpp.vectors_resize(self, *args)

    def insert(self, *args):
        return _envcpp.vectors_insert(self, *args)

    def reserve(self, n):
        return _envcpp.vectors_reserve(self, n)

    def capacity(self):
        return _envcpp.vectors_capacity(self)
    __swig_destroy__ = _envcpp.delete_vectors
    __del__ = lambda self: None
vectors_swigregister = _envcpp.vectors_swigregister
vectors_swigregister(vectors)

class Environment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Environment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Environment, name)
    __repr__ = _swig_repr

    def __init__(self, filedir):
        this = _envcpp.new_Environment(filedir)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _envcpp.delete_Environment
    __del__ = lambda self: None

    def get_download_time(self, video_chunk_size):
        return _envcpp.Environment_get_download_time(self, video_chunk_size)

    def reset_download_time(self):
        return _envcpp.Environment_reset_download_time(self)

    def get_video_chunk(self, quality):
        return _envcpp.Environment_get_video_chunk(self, quality)

    def get_optimal(self, last_video_vmaf):
        return _envcpp.Environment_get_optimal(self, last_video_vmaf)

    def get_optimal_v2(self, last_video_vmaf, alpha, beta, gamma, delta):
        return _envcpp.Environment_get_optimal_v2(self, last_video_vmaf, alpha, beta, gamma, delta)
    __swig_setmethods__["optimal"] = _envcpp.Environment_optimal_set
    __swig_getmethods__["optimal"] = _envcpp.Environment_optimal_get
    if _newclass:
        optimal = _swig_property(_envcpp.Environment_optimal_get, _envcpp.Environment_optimal_set)
    __swig_setmethods__["delay0"] = _envcpp.Environment_delay0_set
    __swig_getmethods__["delay0"] = _envcpp.Environment_delay0_get
    if _newclass:
        delay0 = _swig_property(_envcpp.Environment_delay0_get, _envcpp.Environment_delay0_set)
    __swig_setmethods__["sleep_time0"] = _envcpp.Environment_sleep_time0_set
    __swig_getmethods__["sleep_time0"] = _envcpp.Environment_sleep_time0_get
    if _newclass:
        sleep_time0 = _swig_property(_envcpp.Environment_sleep_time0_get, _envcpp.Environment_sleep_time0_set)
    __swig_setmethods__["return_buffer_size0"] = _envcpp.Environment_return_buffer_size0_set
    __swig_getmethods__["return_buffer_size0"] = _envcpp.Environment_return_buffer_size0_get
    if _newclass:
        return_buffer_size0 = _swig_property(_envcpp.Environment_return_buffer_size0_get, _envcpp.Environment_return_buffer_size0_set)
    __swig_setmethods__["rebuf0"] = _envcpp.Environment_rebuf0_set
    __swig_getmethods__["rebuf0"] = _envcpp.Environment_rebuf0_get
    if _newclass:
        rebuf0 = _swig_property(_envcpp.Environment_rebuf0_get, _envcpp.Environment_rebuf0_set)
    __swig_setmethods__["video_chunk_size0"] = _envcpp.Environment_video_chunk_size0_set
    __swig_getmethods__["video_chunk_size0"] = _envcpp.Environment_video_chunk_size0_get
    if _newclass:
        video_chunk_size0 = _swig_property(_envcpp.Environment_video_chunk_size0_get, _envcpp.Environment_video_chunk_size0_set)
    __swig_setmethods__["end_of_video0"] = _envcpp.Environment_end_of_video0_set
    __swig_getmethods__["end_of_video0"] = _envcpp.Environment_end_of_video0_get
    if _newclass:
        end_of_video0 = _swig_property(_envcpp.Environment_end_of_video0_get, _envcpp.Environment_end_of_video0_set)
    __swig_setmethods__["video_chunk_remain0"] = _envcpp.Environment_video_chunk_remain0_set
    __swig_getmethods__["video_chunk_remain0"] = _envcpp.Environment_video_chunk_remain0_get
    if _newclass:
        video_chunk_remain0 = _swig_property(_envcpp.Environment_video_chunk_remain0_get, _envcpp.Environment_video_chunk_remain0_set)
    __swig_setmethods__["video_chunk_vmaf0"] = _envcpp.Environment_video_chunk_vmaf0_set
    __swig_getmethods__["video_chunk_vmaf0"] = _envcpp.Environment_video_chunk_vmaf0_get
    if _newclass:
        video_chunk_vmaf0 = _swig_property(_envcpp.Environment_video_chunk_vmaf0_get, _envcpp.Environment_video_chunk_vmaf0_set)
    __swig_setmethods__["all_cooked_bw"] = _envcpp.Environment_all_cooked_bw_set
    __swig_getmethods__["all_cooked_bw"] = _envcpp.Environment_all_cooked_bw_get
    if _newclass:
        all_cooked_bw = _swig_property(_envcpp.Environment_all_cooked_bw_get, _envcpp.Environment_all_cooked_bw_set)
    __swig_setmethods__["all_cooked_time"] = _envcpp.Environment_all_cooked_time_set
    __swig_getmethods__["all_cooked_time"] = _envcpp.Environment_all_cooked_time_get
    if _newclass:
        all_cooked_time = _swig_property(_envcpp.Environment_all_cooked_time_get, _envcpp.Environment_all_cooked_time_set)
    __swig_setmethods__["CHUNK_COMBO_OPTIONS"] = _envcpp.Environment_CHUNK_COMBO_OPTIONS_set
    __swig_getmethods__["CHUNK_COMBO_OPTIONS"] = _envcpp.Environment_CHUNK_COMBO_OPTIONS_get
    if _newclass:
        CHUNK_COMBO_OPTIONS = _swig_property(_envcpp.Environment_CHUNK_COMBO_OPTIONS_get, _envcpp.Environment_CHUNK_COMBO_OPTIONS_set)
    __swig_setmethods__["all_file_names"] = _envcpp.Environment_all_file_names_set
    __swig_getmethods__["all_file_names"] = _envcpp.Environment_all_file_names_get
    if _newclass:
        all_file_names = _swig_property(_envcpp.Environment_all_file_names_get, _envcpp.Environment_all_file_names_set)
    __swig_setmethods__["video_chunk_counter"] = _envcpp.Environment_video_chunk_counter_set
    __swig_getmethods__["video_chunk_counter"] = _envcpp.Environment_video_chunk_counter_get
    if _newclass:
        video_chunk_counter = _swig_property(_envcpp.Environment_video_chunk_counter_get, _envcpp.Environment_video_chunk_counter_set)
    __swig_setmethods__["buffer_size"] = _envcpp.Environment_buffer_size_set
    __swig_getmethods__["buffer_size"] = _envcpp.Environment_buffer_size_get
    if _newclass:
        buffer_size = _swig_property(_envcpp.Environment_buffer_size_get, _envcpp.Environment_buffer_size_set)
    __swig_setmethods__["trace_idx"] = _envcpp.Environment_trace_idx_set
    __swig_getmethods__["trace_idx"] = _envcpp.Environment_trace_idx_get
    if _newclass:
        trace_idx = _swig_property(_envcpp.Environment_trace_idx_get, _envcpp.Environment_trace_idx_set)
    __swig_setmethods__["cooked_time"] = _envcpp.Environment_cooked_time_set
    __swig_getmethods__["cooked_time"] = _envcpp.Environment_cooked_time_get
    if _newclass:
        cooked_time = _swig_property(_envcpp.Environment_cooked_time_get, _envcpp.Environment_cooked_time_set)
    __swig_setmethods__["cooked_bw"] = _envcpp.Environment_cooked_bw_set
    __swig_getmethods__["cooked_bw"] = _envcpp.Environment_cooked_bw_get
    if _newclass:
        cooked_bw = _swig_property(_envcpp.Environment_cooked_bw_get, _envcpp.Environment_cooked_bw_set)
    __swig_setmethods__["mahimahi_start_ptr"] = _envcpp.Environment_mahimahi_start_ptr_set
    __swig_getmethods__["mahimahi_start_ptr"] = _envcpp.Environment_mahimahi_start_ptr_get
    if _newclass:
        mahimahi_start_ptr = _swig_property(_envcpp.Environment_mahimahi_start_ptr_get, _envcpp.Environment_mahimahi_start_ptr_set)
    __swig_setmethods__["mahimahi_ptr"] = _envcpp.Environment_mahimahi_ptr_set
    __swig_getmethods__["mahimahi_ptr"] = _envcpp.Environment_mahimahi_ptr_get
    if _newclass:
        mahimahi_ptr = _swig_property(_envcpp.Environment_mahimahi_ptr_get, _envcpp.Environment_mahimahi_ptr_set)
    __swig_setmethods__["last_mahimahi_time"] = _envcpp.Environment_last_mahimahi_time_set
    __swig_getmethods__["last_mahimahi_time"] = _envcpp.Environment_last_mahimahi_time_get
    if _newclass:
        last_mahimahi_time = _swig_property(_envcpp.Environment_last_mahimahi_time_get, _envcpp.Environment_last_mahimahi_time_set)
    __swig_setmethods__["virtual_mahimahi_ptr"] = _envcpp.Environment_virtual_mahimahi_ptr_set
    __swig_getmethods__["virtual_mahimahi_ptr"] = _envcpp.Environment_virtual_mahimahi_ptr_get
    if _newclass:
        virtual_mahimahi_ptr = _swig_property(_envcpp.Environment_virtual_mahimahi_ptr_get, _envcpp.Environment_virtual_mahimahi_ptr_set)
    __swig_setmethods__["virtual_last_mahimahi_time"] = _envcpp.Environment_virtual_last_mahimahi_time_set
    __swig_getmethods__["virtual_last_mahimahi_time"] = _envcpp.Environment_virtual_last_mahimahi_time_get
    if _newclass:
        virtual_last_mahimahi_time = _swig_property(_envcpp.Environment_virtual_last_mahimahi_time_get, _envcpp.Environment_virtual_last_mahimahi_time_set)
Environment_swigregister = _envcpp.Environment_swigregister
Environment_swigregister(Environment)

# This file is compatible with both classic and new-style classes.


